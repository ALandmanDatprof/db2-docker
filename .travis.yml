env:
  - ENV=expc
  - ENV=ese-10.5
  - ENV=ese-11.1
  - DB2USER=db2inst1

sudo: required

services:
  - docker

before_install:
  # Builds Express-C image
  - bash -c "if [ '$ENV' = 'expc' ] ; then docker build -t angoca/db2-install:expc db2-install/expc/ ; docker images ; fi"
  - bash -c "if [ '$ENV' = 'expc' ] ; then docker build -t angoca/db2-db2inst1:expc db2-db2inst1/expc/ ; docker images ; fi"
  # Builds Enterprise Server Edition image for V10.5
  - bash -c "if [ '$ENV' = 'ese-10.5' ] ; then docker build -t angoca/db2-install:ese db2-install/10.5/server_t/ ; docker images ; fi"
  - bash -c "if [ '$ENV' = 'ese-10.5' ] ; then docker build -t angoca/db2-db2inst1:ese db2-db2inst1/10.5/server_t/ ; docker images ; fi"
  # Builds Enterprise Server Edition image for V11.1
  - bash -c "if [ '$ENV' = 'ese-11.1' ] ; then docker build -t angoca/db2-install:ese db2-install/11.1/server_t/ ; docker images ; fi"
  - bash -c "if [ '$ENV' = 'ese-11.1' ] ; then docker build -t angoca/db2-db2inst1:ese db2-db2inst1/11.1/server_t/ ; docker images ; fi"

script:
  - docker images

  # Starts Express-C image
  - bash -c "if [ '$ENV' = 'expc' ] ; then echo \". /home/db2inst1/sqllib/db2profile ; db2start\" | docker run -i --ipc="host" --privileged=true --name="db2inst1" -p 50000:50000 angoca/db2-db2inst1:expc ; fi"
  # Starts Enterprise Server Edition image
  - bash -c "if [ '$ENV' = 'ese-10.5' ] ; then echo \". /home/db2inst1/sqllib/db2profile ; db2start\" | docker run -i --ipc="host" --privileged=true --name="db2inst1" -p 50000:50000 angoca/db2inst1:ese-10.5 ; fi"
  - bash -c "if [ '$ENV' = 'ese-11.1' ] ; then echo \". /home/db2inst1/sqllib/db2profile ; db2start\" | docker run -i --ipc="host" --privileged=true --name="db2inst1" -p 50000:50000 angoca/db2inst1:ese-11.1 ; fi"

  - docker ps -a

  # Starts the instance and creates a database.
  - docker start $(docker ps -a -q)
  - docker exec -u ${DB2USER} $(docker ps -a -q) ". ~db2inst1/sqllib/db2profile ; db2start"
  - docker exec -u ${DB2USER} $(docker ps -a -q) ". ~db2inst1/sqllib/db2profile ; db2 create db test"
  - docker exec -u ${DB2USER} $(docker ps -a -q) ". ~db2inst1/sqllib/db2profile ; db2 connect to test"

# Logs into Docker
after_success:
  - if [ "$TRAVIS_BRANCH" == "master" ]; then
      docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD";
    fi

